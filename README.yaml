name: "aws-bastion"
# Canonical GitHub repo
github_repo: "cloudposse-terraform-components/aws-bastion"
# Short description of this project
description: |-
  This component provisions a generic Bastion host within an Auto Scaling Group (ASG) with parameterized `user_data` and
  supports AWS SSM Session Manager for remote access with IAM authentication.

  If a special `container.sh` script is desired to run, set `container_enabled` to `true`, and set the `image_repository`
  and `image_container` variables.

  By default, this component acts as an "SSM Bastion", which is deployed to a private subnet and has SSM enabled, allowing
  access via the AWS Console, AWS CLI, or SSM Session tools such as [aws-gate](https://github.com/xen0l/aws-gate).
  Alternatively, this component can be used as a regular SSH Bastion, deployed to a public subnet with Security Group
  rules allowing inbound traffic over port 22.
usage: |-
  **Stack Level**: Regional

  By default, this component can be used as an "SSM Bastion" (deployed to a private subnet, accessed via SSM):

  ```yaml
  components:
    terraform:
      bastion:
        vars:
          enabled: true
          name: bastion-ssm
          # Your choice of availability zones. If not specified, all private subnets are used.
          availability_zones: ["us-east-1a", "us-east-1b", "us-east-1c"]
          instance_type: t3.micro
          image_container: infrastructure:latest
          image_repository: "111111111111.dkr.ecr.us-east-1.amazonaws.com/example/infrastructure"
  ```

  The following is an example snippet for how to use this component as a traditional bastion:

  ```yaml
  components:
    terraform:
      bastion:
        vars:
          enabled: true
          name: bastion-traditional
          image_container: infrastructure:latest
          image_repository: "111111111111.dkr.ecr.us-east-1.amazonaws.com/example/infrastructure"
          associate_public_ip_address: true # deploy to public subnet and associate public IP with instance
          custom_bastion_hostname: bastion
          vanity_domain: example.com
          security_group_rules:
            - type: "ingress"
              from_port: 22
              to_port: 22
              protocol: tcp
              cidr_blocks: ["1.2.3.4/32"]
            - type: "egress"
              from_port: 0
              to_port: 0
              protocol: -1
              cidr_blocks: ["0.0.0.0/0"]
  ```
references:
  - name: "cloudposse-terraform-components"
    description: "Cloud Posse's upstream component"
    url: "https://github.com/orgs/cloudposse-terraform-components/repositories"
tags:
  - component/bastion
  - layer/network
  - provider/aws
# Categories of this project
categories:
  - component/bastion
  - layer/network
  - provider/aws
# License of this project
license: "APACHE2"
# Badges to display
badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse-terraform-components/aws-bastion.svg?style=for-the-badge
    url: https://github.com/cloudposse-terraform-components/aws-bastion/releases/latest
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com
related:
  - name: "Cloud Posse Terraform Modules"
    description: Our collection of reusable Terraform modules used by our reference architectures.
    url: "https://docs.cloudposse.com/modules/"
  - name: "Atmos"
    description: "Atmos is like docker-compose but for your infrastructure"
    url: "https://atmos.tools"
contributors: [] # If included generates contribs
